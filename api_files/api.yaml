openapi: 3.0.3
info:
  title: ITM TA3 API
  description: |-
    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.

    The API is based on the OpenAPI 3.0 specification.
  version: 0.3.0
servers:
  - url: /
tags:
  - name: itm-ta2-eval
    description: Endpoints for TA2 Evaluation
paths:
  /ta2/startSession:
    get:
      tags:
        - itm-ta2-eval
      summary: Start a new session
      description:
        Get unique session id for grouping answers from a collection of
        scenarios together
      operationId: start_session
      parameters:
        - name: adm_name
          in: query
          description: A self-assigned ADM name.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: adm_profile
          in: query
          description: a profile of the ADM in terms of its alignment strategy
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: session_type
          in: query
          description: "the type of session to start (`eval`, `test`, or a TA1 name)"
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: eval
        - name: kdma_training
          in: query
          description: whether or not this is a training session with TA2
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
        - name: max_scenarios
          in: query
          description:
            "the maximum number of scenarios requested, not supported in\
            \ `eval` sessions"
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int16
      responses:
        "200":
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                description: a new session Id to use in subsequent calls
                x-content-type: text/plain
        "400":
          description: Invalid session type or max_scenarios
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "503":
          description: The server is not ready to start a session
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/scenario:
    get:
      tags:
        - itm-ta2-eval
      summary: Get the next scenario
      description:
        "Get the next scenario in a session with the specified ADM name,\
        \ returning a Scenario object and unique id"
      operationId: start_scenario
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: query
          description: "the scenario id to run; incompatible with /ta2/startSession's max_scenarios parameter"
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description:
            "Successful operation; scenario data returned, or session_complete\
            \ is True"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scenario"
        "400":
          description: Invalid Session ID, there is already an active scenario, or scenario_id was specified with max_scenarios
        "404":
          description: Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "503":
          description: Could not communicate with TA1 server
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/getAlignmentTarget:
    get:
      tags:
        - itm-ta2-eval
      summary: Retrieve alignment target for the scenario
      description: Retrieve alignment target for the scenario with the specified id
      operationId: get_alignment_target
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: query
          description: The ID of the scenario for which to retrieve alignment target
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation, alignment target returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlignmentTarget"
        "400":
          description: Scenario Complete or Invalid Session ID
        "404":
          description: Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/getSessionAlignment:
    get:
      tags:
        - itm-ta2-eval
      summary: Retrieve session alignment from TA1
      description: Retrieve the current session alignment for the session with the specified id
      operationId: get_session_alignment
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: target_id
          in: query
          description: alignment target id
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Response; if server is configured to run without TA1, then session alignment will be empty/None/null.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlignmentResults"
        "400":
          description: Session ID not found
        "403":
          description: Session alignment can only be requested during a training session
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "503":
          description: Could not get session alignment from TA1
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/{scenario_id}/getState:
    get:
      tags:
        - itm-ta2-eval
      summary: Retrieve scenario state
      description: Retrieve state of the scenario with the specified id
      operationId: get_scenario_state
      parameters:
        - name: session_id
          in: query
          description: a unique session_id, as returned by /ta2/startSession
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: path
          description: the ID of the scenario for which to retrieve status
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation, scenario state returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        "400":
          description: Invalid Session ID
        "404":
          description: Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/{scenario_id}/getAvailableActions:
    get:
      tags:
        - itm-ta2-eval
      summary: Get a list of currently available ADM actions
      description:
        Retrieve a list of currently available actions in the scenario
        with the specified id
      operationId: get_available_actions
      parameters:
        - name: session_id
          in: query
          description: a unique session_id, as returned by /ta2/startSession
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: path
          description: The ID of the scenario for which to retrieve available actions
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation; array of possible Actions returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
                x-content-type: application/json
        "400":
          description: Scenario Complete or Invalid Session ID
        "404":
          description: Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/takeAction:
    post:
      tags:
        - itm-ta2-eval
      summary: Take an action within a scenario
      description: Take the specified Action within a scenario
      operationId: take_action
      parameters:
        - name: session_id
          in: query
          description: a unique session_id, as returned by /ta2/startSession
          required: true
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description:
          Encapsulation of an action taken by a DM in the context of the
          scenario
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Action"
      responses:
        "200":
          description: "Successful operation, scenario state returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        "400":
          description: Invalid action or Session ID, or specified an intent action
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/intendAction:
    post:
      tags:
        - itm-ta2-eval
      summary: Express intent to take an action within a scenario
      description: Express intent to take the specified Action within a scenario
      operationId: intend_action
      parameters:
        - name: session_id
          in: query
          description: a unique session_id, as returned by /ta2/startSession
          required: true
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description:
          Encapsulation of the intended action by a DM in the context of the
          scenario
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Action"
      responses:
        "200":
          description: "Successful operation, scenario state returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        "400":
          description: Invalid action or Session ID, or did not specify an intent action
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
components:
  schemas:
    Scenario:
      required:
        - id
        - name
        - state
      type: object
      description: a triage scenario requiring decisions by a medic
      properties:
        id:
          type: string
          description: a globally unique id for the scenario
        name:
          type: string
          description: human-readable scenario name, not necessarily unique
          example: IED Explosion
        first_scene:
          type: string
          description: indicates the first/opening scene ID in the scenario
        session_complete:
          type: boolean
          description: "set to true if the session is complete; that is, there are\
            \ no more scenarios"
        state:
          $ref: "#/components/schemas/State"
        scenes:
          type: array
          description: A list of specification for all scenes in the scenario
          items:
            $ref: "#/components/schemas/Scene"
    AlignmentResults:
      title: AlignmentResults
      required:
        - alignment_source
        - alignment_target_id
        - score
        - kdma_values
      type: object
      description: Computed KDMA profile and alignment score for a set of decisions.
      properties:
        alignment_source:
          title: Alignment Source
          type: array
          items:
            "$ref": "#/components/schemas/AlignmentSource"
        alignment_target_id:
          title: Alignment Target Id
          type: string
          description: ID of desired profile to align responses to.
        score:
          title: Score
          type: number
          description: Measured alignment, 0 (completely unaligned) - 1 (completely aligned).
          minimum: 0
          maximum: 1
        kdma_values:
          title: Kdma Values
          type: array
          items:
            "$ref": "#/components/schemas/KDMA_Value"
          description: Computed KDMA profile from results
    AlignmentSource:
      title: AlignmentSource
      required:
        - scenario_id
        - probes
      type: object
      description: |-
        Describes which session/probe responses were used to
        compute an alignment score, allowing for lots of flexibility.
      properties:
        scenario_id:
          title: Scenario Id
          type: string
          description: Unique ID for user session.
        probes:
          title: Probes
          type: array
          items:
            type: string
          description: List of ID's of probes used to compute alignment.
    AlignmentTarget:
      required:
        - id
        - kdma_values
      type: object
      description: list of KDMAs to align to
      properties:
        id:
          type: string
          description: globally unique alignment target id
        kdma_values:
          type: array
          description: list of KDMAs to align to
          items:
            $ref: "#/components/schemas/KDMA_Value"
      example:
        kdma_values:
          - value: 0.8
            kdma: mission
          - value: 0.5
            kdma: fairness
        id: id
    KDMA_Value:
      required:
        - kdma
        - value
      type: object
      description: a KDMA and its value
      properties:
        kdma:
          type: string
          description: KDMA name
          example: mission
        value:
          type: number
          format: float
          description: target alignment value
          minimum: 0.0
          maximum: 1.0
      example:
        value: 0.8
        kdma: mission
    State:
      required:
        - unstructured
        - environment
        - supplies
        - characters
      type: object
      description: the current tactical & environmental state of the scenario and of its characters
      properties:
        unstructured:
          type: string
          description: Natural language, plain text description of a scene's state
        elapsed_time:
          type: integer
          description: The simulated elapsed time (in seconds) since the scenario started
          example: 10
        meta_info:
          $ref: "#/components/schemas/MetaInfo"
        scenario_complete:
          type: boolean
          description: set to true if the scenario is complete; subsequent calls involving
            that scenario will return an error code
        mission:
          $ref: "#/components/schemas/Mission"
        environment:
          $ref: "#/components/schemas/Environment"
        threat_state:
          $ref: "#/components/schemas/ThreatState"
        events:
          type: array
          description: A list of scenario events to inform decision-making
          items:
            $ref: "#/components/schemas/Event"
        supplies:
          type: array
          description: A list of supplies available to the medic
          items:
            $ref: "#/components/schemas/Supplies"
        characters:
          type: array
          description: A list of characters in the scene, including injured patients, civilians, medics, etc.
          items:
            $ref: "#/components/schemas/Character"
    MetaInfo:
      type: object
      description: Includes meta info to assist with debugging. Only provided during training sessions.
      properties:
        scene_id:
          type: string
          description: The scene ID, unique throughout the scenario
        probe_response:
          $ref: "#/components/schemas/ProbeResponse"
    Mission:
      required:
        - mission_type
        - unstructured
      type: object
      description: Mission parameters that impact decision-making
      properties:
        unstructured:
          type: string
          description: natural language description of current mission
          example: Place sensors in and around the jungle base
        mission_type:
          $ref: "#/components/schemas/MissionTypeEnum"
        character_importance:
          type: array
          description: A list of pairs of character ids with an indicator of how mission-critical the character is
          items:
            type: object
            description: A character id with an indicator of how mission-critical that character is
            additionalProperties:
              $ref: "#/components/schemas/MissionImportanceEnum"
            example:
              - "Mike": normal
              - "Intelligence Officer": priority
        civilian_presence:
          $ref: "#/components/schemas/CivilianPresenceEnum"
        communication_capability:
          $ref: "#/components/schemas/CommunicationCapabilityEnum"
        roe:
          type: string
          description: rules of engagement to inform decision-making, but not to restrict decision space
        political_climate:
          type: string
          description: The political climate in a mission to inform decision-making
        medical_policies:
          type: array
          description: A list of medical policies; omit this property if no special policy is in place
          items:
            $ref: "#/components/schemas/MedicalPoliciesEnum"
    Environment:
      required:
        - sim_environment
      type: object
      description: Environmental parameters that impact either decision-making, the simulation environment, or both
      properties:
        sim_environment:
          $ref: "#/components/schemas/SimEnvironment"
        decision_environment:
          $ref: "#/components/schemas/DecisionEnvironment"
    SimEnvironment:
      required:
        - type
      type: object
      description: Environmental elements that impact simulation configuration
      properties:
        unstructured:
          type: string
          description: Natural language, plain text description of the environment
          example: It was a dark and stormy night.
        type:
          $ref: "#/components/schemas/SimEnvironmentTypeEnum"
        weather:
          $ref: "#/components/schemas/WeatherTypeEnum"
        terrain:
          $ref: "#/components/schemas/TerrainTypeEnum"
        flora:
          $ref: "#/components/schemas/FloraTypeEnum"
        fauna:
          $ref: "#/components/schemas/FaunaTypeEnum"
        temperature:
          type: number
          format: float
          description: numerical temperature in degrees Fahrenheit
          minimum: -75.0
          maximum: 150.0
        humidity:
          type: number
          format: float
          description: Numerical relative humidity, in percentage
          minimum: 0.0
          maximum: 100.0
        lighting:
          $ref: "#/components/schemas/LightingTypeEnum"
        visibility:
          $ref: "#/components/schemas/VisibilityTypeEnum"
        noise_ambient:
          $ref: "#/components/schemas/AmbientNoiseEnum"
        noise_peak:
          $ref: "#/components/schemas/PeakNoiseEnum"
    DecisionEnvironment:
      required:
        - unstructured
      type: object
      description: Environmental elements that impact decision-making
      properties:
        unstructured:
          type: string
          description: Natural language, plain text description of decision-impacting environmental factors
          example: Injuries triggered by an IED detonation.  Helicopter Evac expected in one hour for up to three casualties.
        aid:
          type: array
          description: A list of available forms of aid
          items:
            $ref: "#/components/schemas/Aid"
        movement_restriction:
          $ref: "#/components/schemas/MovementRestrictionEnum"
        sound_restriction:
          $ref: "#/components/schemas/SoundRestrictionEnum"
        oxygen_levels:
          $ref: "#/components/schemas/OxygenLevelsEnum"
        population_density:
          $ref: "#/components/schemas/PopulationDensityEnum"
        injury_triggers:
          $ref: "#/components/schemas/InjuryTriggerEnum"
        air_quality:
          $ref: "#/components/schemas/AirQualityEnum"
        city_infrastructure:
          type: string
          description: Refers to building/city infrastructure that should be noted and known (safe house, etc.)
    Aid:
      required:
        - id
        - delay
      type: object
      description: "Properties related to evacuation, available hospitals, or other forms of aid"
      properties:
        id:
          type: string
          description: "An identifier for the aid opportunity, unique within the scene"
        delay:
          type: number
          format: float
          description: "Time until aid is available, in minutes; 0 means ready now"
          minimum: 0
        type:
          $ref: "#/components/schemas/AidTypeEnum"
        role:
          type: integer
          description: >
            The characterization of health support for the distribution of medical resources and capabilities; Role 1 has higher capability than Role 4.
            See [health.mil](https://health.mil/Reference-Center/Glossary-Terms/2018/06/22/Roles-of-Medical-Care)
          minimum: 1
          maximum: 4
        patients_treated:
          type: array
          description: "A list of types of patients that can be helped; if omitted, then no restrictions or restrictions are irrelevant"
          items:
            $ref: "#/components/schemas/MilitaryDispositionEnum"
        max_transport:
          type: integer
          description: Maximum number of casualties that can be accommodated
          minimum: 1
    ThreatState:
      required:
        - unstructured
        - threats
      type: object
      description: Description of the current threat to the characters, including the medic
      properties:
        unstructured:
          type: string
          description: Natural language, plain text description of environmental threats
          example: No additional threats are detected
        threats:
          type: array
          description: A list of pairs of threat types with a severity descriptor
          items:
            $ref: "#/components/schemas/Threat"
      example:
        unstructured: Gunfire can be heard in the surrounding area
        threats:
          - type: gunfire
            severity: severe
    Threat:
      required:
        - threat_type
        - severity
      type: object
      description: threats in the environment that could affect decision-making
      properties:
        threat_type:
          $ref: "#/components/schemas/ThreatTypeEnum"
        severity:
          $ref: "#/components/schemas/ThreatSeverityEnum"
    Event:
      required:
        - unstructured
        - type
      type: object
      description: a unit of structured communication from scenario to ADM
      properties:
        unstructured:
          type: string
          description: Natural language, plain text description of the event
        type:
          $ref: "#/components/schemas/EventTypeEnum"
        source:
          type: string
          description: "The 'subject' of the event; can be a character `id` or an `EntityTypeEnum`"
        object:
          type: string
          description: "The 'object' of the event; can be a character `id` or an `EntityTypeEnum`"
        when:
          type: number
          format: float
          description: "indicates when (in minutes) the event happened (negative value) or is expected to happen (positive value); omit if zero (event happens now)"
        action_id:
          type: string
          description: An action ID from among the available actions
        relevant_state:
          type: array
          description: An array of relevant state for the Event
          items:
            description: >
              string paths within the `State` object, in which indexed lists are context-sensitive:
              for an aid or a character, it's the id;
              for a supply, it's the type;
              for a threat, it's the threat_type;
              for an injury, it's the location
            type: string
            example: environment.decision_environment.aid[civilian_facility].max_transport
    Supplies:
      required:
        - quantity
        - type
      type: object
      description: a single type of medical supply available to the medic
      properties:
        type:
          $ref: "#/components/schemas/SupplyTypeEnum"
        reusable:
          type: boolean
          description: Whether or not item is consumable/reusable
          default: false
        quantity:
          type: integer
          description: Number of items available in the medical bag
          format: int32
          minimum: 0
          maximum: 999
      example:
        type: Tourniquet
        quantity: 4
        reusable: false
    Character:
      required:
        - id
        - name
        - unstructured
        - demographics
      type: object
      description: a character in the scene, including injured patients, civilians, medics, etc.
      properties:
        id:
          type: string
          description: A unique character ID throughout the scenario
          example: Soldier_01
        name:
          type: string
          description: display name, as in a dashboard
          example: Mike
        unstructured:
          type: string
          description: Natural language, plain text description of the character
          example: 22 YO male Marine hit by an IED. Puncture wound on the left side of the neck.
        unstructured_postassess:
          type: string
          description: unstructured description updated after character assessment
          example: 22 YO male Marine hit by an IED. Puncture wound on the left side of the neck.  Burns cover about 30 of his body.
        has_blanket:
          type: boolean
          description: whether or not this character has a blanket (either wrapped around or underneath)
          default: false
        unseen:
          type: boolean
          description: whether or not this character is visible in the scene or merely heard or reported about from a nearby location
          default: false
        intent:
          $ref: "#/components/schemas/IntentEnum"
        directness_of_causality:
          $ref: "#/components/schemas/DirectnessEnum"
        rapport:
          $ref: "#/components/schemas/RapportEnum"
        demographics:
          $ref: "#/components/schemas/Demographics"
        injuries:
          type: array
          description: A list of Injuries for the character
          items:
            $ref: "#/components/schemas/Injury"
        vitals:
          $ref: "#/components/schemas/Vitals"
        visited:
          type: boolean
          description: whether or not this character has been visited by the ADM in the current scenario
          default: false
        tag:
          $ref: "#/components/schemas/CharacterTagEnum"
    Demographics:
      required:
        - sex
        - race
      type: object
      description: Basic properties about the character
      properties:
        age:
          type: integer
          description: the age of the character, omit if unknown
          format: int16
          minimum: 0
          maximum: 125
        sex:
          $ref: "#/components/schemas/DemographicSexEnum"
        race:
          $ref: "#/components/schemas/RaceEnum"
        military_disposition:
          $ref: "#/components/schemas/MilitaryDispositionEnum"
        military_branch:
          $ref: "#/components/schemas/MilitaryBranchEnum"
        rank:
          $ref: "#/components/schemas/MilitaryRankEnum"
        rank_title:
          $ref: "#/components/schemas/MilitaryRankTitleEnum"
        skills:
          type: array
          description: A list of pairs of skill type and descriptive skill level
          items:
            $ref: "#/components/schemas/Skills"
          example:
            - skill_type: Combat
              level: skilled
            - skill_type: Medical
              level: novice
        role:
          $ref: "#/components/schemas/CharacterRoleEnum"
        mission_importance:
          $ref: "#/components/schemas/MissionImportanceEnum"
    Skills:
      required:
        - skill_type
        - level
      type: object
      description: A skill possessed by a character at a certain level of proficiency
      properties:
        skill_type:
          $ref: "#/components/schemas/SkillTypeEnum"
        level:
          $ref: "#/components/schemas/SkillLevelEnum"
    Vitals:
      type: object
      description: Vital levels and other indications of health
      properties:
        avpu:
          $ref: "#/components/schemas/AvpuLevelEnum"
        ambulatory:
          type: boolean
          description: whether or not the character can walk
        mental_status:
          $ref: "#/components/schemas/MentalStatusEnum"
        breathing:
          $ref: "#/components/schemas/BreathingLevelEnum"
        heart_rate:
          $ref: "#/components/schemas/HeartRateEnum"
        spo2:
          $ref: "#/components/schemas/BloodOxygenEnum"
    Injury:
      required:
        - location
        - name
        - status
      type: object
      description: An injury on a character.
      properties:
        name:
          $ref: "#/components/schemas/InjuryTypeEnum"
        location:
          $ref: "#/components/schemas/InjuryLocationEnum"
        severity:
          $ref: "#/components/schemas/InjurySeverityEnum"
        status:
          $ref: "#/components/schemas/InjuryStatusEnum"
        source_character:
          description: "The character id of the person responsible for the injury, subject to the character's `directness_of_causality`"
          type: string
        treatments_required:
          type: integer
          description: "The number of successful treatments required to treat the injury fully, which sets `status` to `treated`"
          minimum: 1
        treatments_applied:
          type: integer
          description: The number of successful treatments applied to the injury
          minimum: 0
          default: 0
    Scene:
      required:
        - id
        - end_scene_allowed
        - action_mapping
      type: object
      description: the specification for a scene in the scenario
      properties:
        id:
          type: string
          description: The scene ID, unique throughout the scenario
        state:
          $ref: "#/components/schemas/State"
        next_scene:
          type: string
          description: "The ID of the default next scene in the scenario; if empty or missing, then by default this is the last scene."
        end_scene_allowed:
          type: boolean
          description: Whether ADMs can explicitly end the scene
        persist_characters:
          type: boolean
          description: Whether characters should persist from the previous scene
        removed_characters:
          type: array
          description: List of character ids to be removed from the scene
          items:
            type: string
        probe_config:
          description: TA1-provided probe configuration, ignored by TA3
          type: array
          items:
            $ref: "#/components/schemas/ProbeConfig"
        tagging:
          $ref: "#/components/schemas/Tagging"
        action_mapping:
          description: List of actions with details of how those actions map to probe responses
          type: array
          items:
            $ref: "#/components/schemas/ActionMapping"
        restricted_actions:
          description: List of actions that will be excluded from get_available_actions
          type: array
          items:
            $ref: "#/components/schemas/ActionTypeEnum"
          example:
            - CHECK_ALL_VITALS
        transition_semantics:
          $ref: "#/components/schemas/SemanticTypeEnum"
        transitions:
          $ref: "#/components/schemas/Conditions"
    Action:
      required:
        - action_id
        - action_type
      type: object
      description: An action taken by an ADM
      properties:
        action_id:
          type: string
          description: A unique action ID within the scenario
          example: action_01
        action_type:
          $ref: "#/components/schemas/ActionTypeEnum"
        intent_action:
          type: boolean
          default: false
          description: Whether this action is to be taken or intended
        unstructured:
          type: string
          description: Natural language, plain text description of the action
          example: "Check Mike's pulse."
        character_id:
          type: string
          description: The ID of the character being acted upon
        threat_state:
          $ref: "#/components/schemas/ThreatState"
        parameters:
          type: object
          description: key-value pairs containing additional [action-specific parameters](https://github.com/NextCenturyCorporation/itm-evaluation-client?tab=readme-ov-file#available-actions)
          additionalProperties:
            type: string
          example:
            - treatment: Tourniquet
            - location: right forearm
        justification:
          type: string
          description: A justification of the action taken
          example: Character is the VIP of the scenario
        kdma_association:
          type: object
          additionalProperties:
            type: number
            format: float
            minimum: 0.0
            maximum: 1.0
          description: KDMA associations for this choice, if provided by TA1
          example:
            - Mission: 0.8
    ActionMapping:
      required:
        - action_id
        - action_type
        - unstructured
        - probe_id
        - choice
      type: object
      description: Details for how a given action maps to a probe response
      properties:
        action_id:
          type: string
          description: A unique action ID within the scenario
          example: action_01
        action_type:
          $ref: "#/components/schemas/ActionTypeEnum"
        unstructured:
          type: string
          description: Natural language, plain text description of the action
          example: "Check Mike's pulse."
        repeatable:
          type: boolean
          default: false
          description: Whether or not this action should remain after it's selected by an ADM
        character_id:
          type: string
          description: The ID of the character being acted upon
        intent_action:
          type: boolean
          default: false
          description: Whether this mapping is to take an action or to intend one
        threat_state:
          $ref: "#/components/schemas/ThreatState"
        parameters:
          type: object
          description: key-value pairs containing additional [action-specific parameters](https://github.com/NextCenturyCorporation/itm-evaluation-client?tab=readme-ov-file#available-actions)
          additionalProperties:
            type: string
          example:
            - treatment: Tourniquet
            - location: right forearm
        probe_id:
          type: string
          description: A valid probe_id from the appropriate TA1
        choice:
          type: string
          description: A valid choice for the specified probe_id
        next_scene:
          type: string
          description: The ID of the next scene in the scenario; overrides Scene.next_scene
        kdma_association:
          type: object
          additionalProperties:
            type: number
            format: float
            minimum: 0.0
            maximum: 1.0
          description: KDMA associations for this choice, if provided by TA1
          example:
            - Mission: 0.8
        condition_semantics:
          $ref: "#/components/schemas/SemanticTypeEnum"
        conditions:
          $ref: "#/components/schemas/Conditions"
    Conditions:
      type: object
      description: Conditions that specify whether to transition to the next scene or send a probe response
      properties:
        elapsed_time_lt:
          type: integer
          description: True if the scenario elapsed time (in seconds) is less than the specified value
          minimum: 5
        elapsed_time_gt:
          type: integer
          description: True if the scenario elapsed time (in seconds) is greater than the specified value
          minimum: 5
        actions:
          description: True if any of the specified lists of actions have been taken; multiple action ID lists have "or" semantics; multiple action IDs within a list have "and" semantics
          type: array
          items:
            type: array
            items:
              type: string
        probes:
          type: array
          description: True if the specified list of probe_ids have been answered
          items:
            type: string
          example:
            - adept-september-demo-probe-1
        probe_responses:
          type: array
          description: True if the specified list of probe responses (choice) have been sent
          items:
            type: string
          example:
            - adept-september-demo-probe-1-choice2
        character_vitals:
          type: array
          description: True if any of the specified collection of vital values have been met for the specified character_id
          items:
            required:
              - character_id
              - vitals
            type: object
            description: True if all vitals values have been met by the specified character_id
            properties:
              character_id:
                type: string
                description: The ID of the character in question
              vitals:
                $ref: "#/components/schemas/Vitals"
        supplies:
          type: array
          description: True if any of the specified supplies reach or go below the specified quantity
          items:
            $ref: "#/components/schemas/Supplies"
          example:
            - { type: Tourniquet, quantity: 1, reusable: False }
    ProbeConfig:
      type: object
      description: Probe configuration for use by TA1
      properties:
        probe_id:
          type: string
          description: A valid probe_id from the appropriate TA1
        description:
          type: string
          description: A description of the probe for use by TA1
    Tagging:
      type: object
      description: Scene-level tagging configuration
      properties:
        enabled:
          type: boolean
          description: Whether tagging is enabled for the scene
        repeatable:
          type: boolean
          description: Whether probe responses should be sent each time a new tag is applied
        probe_responses:
          type: array
          description: A list of probe responses to send TA1 for each character-tag combination
          items:
            $ref: "#/components/schemas/ProbeResponses"
          example:
            - {
                character_id: Mike,
                probe_id: adept-september-demo-probe-3,
                minimal: s1-p3-choice1,
                delayed: s1-p3-choice2,
                immediate: s1-p3-choice3,
                expectant: s1-p3-choice4,
              }
        reference:
          type: integer
          description: Re-use the tagging configuration from the specified scene index
          minimum: 0
    ProbeResponse:
      required:
        - choice
        - probe_id
        - scenario_id
      type: object
      properties:
        scenario_id:
          type: string
          description: globally unique scenario ID
        probe_id:
          type: string
          description: globally unique probe ID
        choice:
          type: string
          description: id of choice made
        justification:
          type: string
          description: A justification of the response to the probe
      description: encapsulates the selection by a DM of an option in response to
        a probe
    ProbeResponses:
      required:
        - character_id
        - probe_id
        - minimal
        - delayed
        - immediate
        - expectant
      type: object
      description: tag-specific probe responses (choices) for a tagged character
      properties:
        character_id:
          type: string
          description: A valid character ID from the scene
        probe_id:
          type: string
          description: A valid probe_id from the appropriate TA1
        minimal:
          type: string
          description: The probe response to send for a MINIMAL tag
        delayed:
          type: string
          description: The probe response to send for a DELAYED tag
        immediate:
          type: string
          description: The probe response to send for a IMMEDIATE tag
        expectant:
          type: string
          description: The probe response to send for a EXPECTANT tag
    MissionTypeEnum:
      type: string
      description: enumeration of possible mission types
      enum:
        - Attack
        - Defend
        - Delay
        - Patrol
        - Reconnaissance
        - Ambush
        - Listening/Observation
        - Direct Action
        - Hostage rescue
        - Asset transport
        - Sensor emplacement
        - Intelligence gathering
        - Civil affairs
        - Training
        - Sabotage
        - Security patrol
        - Fire support
        - Nuclear deterrence
        - Extraction
        - Unknown
    SimEnvironmentTypeEnum:
      type: string
      description: Basic setting for the entire scenario
      enum:
        - jungle
        - submarine
        - urban
        - desert
    CivilianPresenceEnum:
      type: string
      description: Indicator of how many civilians are present in the mission
      enum:
        - none
        - limited
        - some
        - extensive
        - crowd
    MedicalPoliciesEnum:
      type: string
      description: Directives issued by competent military authority
      enum:
        - Treat All Neutrally
        - Treat Enemy LLE
        - Treat Civilian LLE
        - Prioritize Mission
    CommunicationCapabilityEnum:
      type: string
      description: current availability of internal and external communication
      default: both
      enum:
        - internal
        - external
        - both
        - neither
    WeatherTypeEnum:
      type: string
      description: Descriptor of the scenario weather
      enum:
        - clear
        - wind
        - clouds
        - rain
        - fog
        - thunderstorm
        - hail
        - sleet
        - snow
    TerrainTypeEnum:
      type: string
      description: Descriptor for the scenario terrain
      enum:
        - jungle
        - indoors
        - urban
        - dunes
        - forest
        - beach
        - mountain
        - plains
        - hills
        - swamp
        - flat
        - rough
        - extreme
    FloraTypeEnum:
      type: string
      description: Descriptor of local vegetation.
      enum:
        - none
        - limited
        - normal
        - lush
        - extensive
    FaunaTypeEnum:
      type: string
      description: Descriptor of local animal/insect activity
      enum:
        - none
        - limited
        - normal
        - high
        - pervasive
    LightingTypeEnum:
      type: string
      description: Descriptor of available natural or man-made lighting
      enum:
        - none
        - limited
        - normal
        - bright
        - flashing
    VisibilityTypeEnum:
      type: string
      description: Descriptor for operational visibility; affected by time of day, lighting, weather, terrain, etc.
      enum:
        - none
        - very low
        - low
        - moderate
        - good
        - excellent
    AmbientNoiseEnum:
      type: string
      description: Descriptor for background noise level
      enum:
        - none
        - quiet
        - normal
        - noisy
        - extreme
    PeakNoiseEnum:
      type: string
      description: Descriptor for peak noise level due to gunfire, vehicles, helicopters, etc.
      enum:
        - none
        - quiet
        - normal
        - noisy
        - extreme
    MovementRestrictionEnum:
      type: string
      description: Operational movement restrictions due to any factor including terrain, weather, enemy activity, etc.
      enum:
        - unrestricted
        - minimal
        - moderate
        - severe
        - extreme
    SoundRestrictionEnum:
      type: string
      description: Operational sound restrictions due to any factor
      enum:
        - unrestricted
        - minimal
        - moderate
        - severe
        - extreme
    OxygenLevelsEnum:
      type: string
      description: Oxygen levels due to any factor that may impact decision-making
      enum:
        - normal
        - limited
        - scarce
        - none
    PopulationDensityEnum:
      type: string
      description: persons per square meter, each successive term is one more person per square meter
      enum:
        - none
        - sparse
        - some
        - busy
        - crowded
        - very crowded
        - extreme
    InjuryTriggerEnum:
      type: string
      description: What source caused character injuries
      enum:
        - explosion
        - firearm
        - fall
        - fight
        - pathogen
        - poison
        - animal
        - plant
        - water
        - collision
        - electrical
        - equipment
        - attack
        - fire
        - stress
        - chemical
    AirQualityEnum:
      type: string
      description: Air Quality Index (AQI); see [airnow.gov](https://www.airnow.gov/aqi/aqi-basics/)
      enum:
        - green
        - yellow
        - orange
        - red
        - purple
        - maroon
    AidTypeEnum:
      type: string
      description: Types of aid
      enum:
        - local military
        - local non-military
        - air evac
        - ground evac
        - water evac
        - unknown evac
    ThreatTypeEnum:
      type: string
      description: the type or nature of the threat
      enum:
        - Civil unrest
        - Drone activity
        - Extreme weather
        - Fire
        - Gunfire
        - IED activity
        - Mines
        - Poisonous vegetation
        - Predators
        - Unknown
        - Unstable structure
    ThreatSeverityEnum:
      type: string
      description: how dangerous and/or imminent the threat is
      enum:
        - low
        - moderate
        - substantial
        - severe
        - extreme
    EventTypeEnum:
      type: string
      description: "an enumeration of available event types; the 'verb' of the event"
      enum:
        - change
        - emphasize
        - inform
        - order
        - recommend
    EntityTypeEnum:
      type: string
      description: an enumeration of available entity types; can be a subject or object
      enum:
        - ally
        - adversary
        - civilian
        - commander
        - everybody
        - medic
    MessageTypeEnum:
      type: string
      description: an enumeration of available message types
      enum:
        - allow
        - ask
        - delegate
        - deny
        - justify
        - recommend
        - wait
    SupplyTypeEnum:
      type: string
      description: an enumeration of available supply types
      enum:
        - Tourniquet
        - Pressure bandage
        - Hemostatic gauze
        - Decompression Needle
        - Nasopharyngeal airway
        - Pulse Oximeter
        - Blanket
        - Epi Pen
        - Vented Chest Seal
        - Pain Medications
        - Fentanyl Lollipop
        - Splint
        - Blood
        - IV Bag
        - Burn Dressing
    DemographicSexEnum:
      type: string
      description: the sex of the character
      enum:
        - M
        - F
        - Unknown
    RaceEnum:
      type: string
      description: Race or ethnicity
      enum:
        - American Indian
        - White
        - Hispanic
        - Black
        - Asian
        - Pacific Islander
    MilitaryDispositionEnum:
      type: string
      description: How the character is to be treated in a military context
      enum:
        - Allied US
        - Allied
        - Civilian
        - Military Adversary
        - Military Neutral
        - Non-Military Adversary
    MilitaryBranchEnum:
      type: string
      description: Branch of the US military.
      enum:
        - US Army
        - US Navy
        - US Air Force
        - US Marine Corps
        - US Space Force
        - US Coast Guard
    MilitaryRankEnum:
      type: string
      description: the cross-branch military rank (paygrade)
      enum:
        - E-1
        - E-2
        - E-3
        - E-4
        - E-5
        - E-6
        - E-7
        - E-8
        - E-9
        - E-9 (special)
        - W-1
        - W-2
        - W-3
        - W-4
        - W-5
        - O-1
        - O-2
        - O-3
        - O-4
        - O-5
        - O-6
        - O-7
        - O-8
        - O-9
        - O-10
        - Special
        - Special (Navy)
        - Special (Coast Guard)
    MilitaryRankTitleEnum:
      type: string
      description: the branch-specific military rank
      enum:
        - Private (Recruit)
        - Private
        - Private First Class
        - Specialist
        - Corporal
        - Sergeant
        - Staff Sergeant
        - Sergeant First Class
        - Master Sergeant
        - First Sergeant
        - Sergeant Major
        - Command Sergeant Major
        - Sergeant Major of the Army
        - Warrant Officer 1
        - Chief Warrant Officer 2
        - Chief Warrant Officer 3
        - Chief Warrant Officer 4
        - Chief Warrant Officer 5
        - 2nd Lieutenant
        - 1st Lieutenant
        - Lieutenant
        - Captain
        - Major
        - Lieutenant Colonel
        - Colonel
        - Brigadier General
        - Major General
        - Lieutenant General
        - Army Chief of Staff (special)
        - General
        - Airman Basic
        - Airman
        - Airman First Class
        - Senior Airman
        - Technical Sergeant
        - Senior Master Sergeant
        - First Sergeant / Chief Master Sergeant
        - Chief Master Sergeant of the Air Force
        - Air Force Chief of Staff (special)
        - Seaman Recruit
        - Seaman Apprentice
        - Seaman
        - Petty Officer Third Class
        - Petty Officer Second Class
        - Petty Officer First Class
        - Chief Petty Officer
        - Senior Chief Petty Officer
        - Master Chief Petty Officer
        - Master Chief Petty Officer of the Navy
        - Master Chief Petty Officer of the Coast Guard
        - Chief Warrant Officer
        - Ensign
        - Lieutenant, Junior Grade
        - Lieutenant Commander
        - Commander
        - Rear Admiral (Lower Half)
        - Rear Admiral (Upper Half)
        - Vice Admiral
        - Chief of Naval Operations (special)
        - Commandant of the Coast Guard (special)
        - Admiral
        - Lance Corporal
        - Gunnery Sergeant
        - Master Gunnery Sergeant
        - Sergeant Major of the Marine Corps
        - Warrant Officer
        - Commandant of the Marine Corps
        - Specialist 1
        - Specialist 2
        - Specialist 3
        - Specialist 4
        - Chief Master Sergeant
        - Chief Master Sergeant of the Space Force
        - Chief of Space Operations
    CharacterRoleEnum:
      type: string
      description: The primary role a character has in the mission, in terms of the skills they possess
      enum:
        - Infantry
        - SEAL
        - Command
        - Intelligence
        - Medical
        - Specialist
        - Communications
    IntentEnum:
      type: string
      description: The intent of the character
      enum:
        - intend major harm
        - intend minor harm
        - no intent
        - intend minor help
        - intend major help
    DirectnessEnum:
      type: string
      description: How directly a character is responsible for injury
      enum:
        - direct
        - somewhat direct
        - somewhat indirect
        - indirect
        - none
    RapportEnum:
      type: string
      description: A measure of closeness or affinity towards the player/medic
      enum:
        - loathing
        - dislike
        - neutral
        - close
        - familial
    CharacterTagEnum:
      type: string
      description: "the tag assigned to a character"
      example: DELAYED
      enum:
        - MINIMAL
        - DELAYED
        - IMMEDIATE
        - EXPECTANT
    MissionImportanceEnum:
      type: string
      description: How important the character is to the mission
      default: normal
      enum:
        - low
        - normal
        - important
        - priority
        - vip
    SkillTypeEnum:
      type: string
      description: the type of skill the character has
      enum:
        - Medical
        - Combat
        - Specialist
        - Communications
        - Command
    SkillLevelEnum:
      type: string
      description: the level of expertise the character has in the skill
      enum:
        - novice
        - qualified
        - competent
        - skilled
        - expert
    InjuryTypeEnum:
      type: string
      description: A brief but descriptive label for the injury type
      enum:
        - Ear Bleed
        - Asthmatic
        - Laceration
        - Puncture
        - Shrapnel
        - Chest Collapse
        - Amputation
        - Burn
        - Broken Bone
        - Internal
        - Traumatic Brain Injury
        - Open Abdominal Wound
    InjuryLocationEnum:
      type: string
      description: the injury location on the character's body
      enum:
        - right forearm
        - left forearm
        - right hand
        - left hand
        - right leg
        - left leg
        - right calf
        - left calf
        - right thigh
        - left thigh
        - right stomach
        - left stomach
        - right bicep
        - left bicep
        - right shoulder
        - left shoulder
        - right side
        - left side
        - right chest
        - left chest
        - center chest
        - right wrist
        - left wrist
        - left face
        - right face
        - left neck
        - right neck
        - internal
        - head
        - neck
        - stomach
        - unspecified
    InjurySeverityEnum:
      type: string
      description: The severity of the injury; for revelant injuries, impacts blood pool sizes
      enum:
        - minor
        - moderate
        - substantial
        - major
        - extreme
    InjuryStatusEnum:
      type: string
      description: "Whether the injury is known prior- and post-assessment, and to what extent it's been treated"
      enum:
        - hidden
        - discoverable
        - visible
        - discovered
        - partially treated
        - treated
    AvpuLevelEnum:
      type: string
      description: Character level of response; anything but ALERT is considered unconscious.  See [Levels of Response](https://www.firstresponse.org.uk/first-aid-az/3-general/first-aid/79-levels-of-response) for details
      enum:
        - ALERT
        - VOICE
        - PAIN
        - UNRESPONSIVE
    MentalStatusEnum:
      type: string
      description: Character mental status, which impacts interaction in the sim environment
      enum:
        - AGONY
        - CALM
        - CONFUSED
        - SHOCK
        - UPSET
        - UNRESPONSIVE
    HeartRateEnum:
      type: string
      description: Descriptive heart rate
      enum:
        - NONE
        - FAINT
        - NORMAL
        - FAST
    BreathingLevelEnum:
      type: string
      description: Descriptive breathing level
      enum:
        - NORMAL
        - FAST
        - SLOW
        - RESTRICTED
        - NONE
    SemanticTypeEnum:
      description: Whether transition or probe response conditions use and, or, or not semantics
      type: string
      default: and
      enum:
        - and
        - or
        - not
    ActionTypeEnum:
      type: string
      description: An action type [recognized by the ADM Server](https://github.com/NextCenturyCorporation/itm-evaluation-client?tab=readme-ov-file#available-actions)
      enum:
        - APPLY_TREATMENT
        - CHECK_ALL_VITALS
        - CHECK_BLOOD_OXYGEN
        - CHECK_PULSE
        - CHECK_RESPIRATION
        - DIRECT_MOBILE_CHARACTERS
        - END_SCENE
        - MESSAGE
        - MOVE_TO
        - MOVE_TO_EVAC
        - SEARCH
        - SITREP
        - TAG_CHARACTER
    BloodOxygenEnum:
      type: string
      description: A description of the percentage of oxygen in someone's blood, as measured by a pulse oximeter
      enum:
        - NORMAL
        - LOW
        - NONE
  responses:
    server_error:
      description: An exception occurred on the server; see returned error string.
      content:
        text/plain:
          schema:
            type: string
            x-content-type: text/plain
    state_returned:
      description: "Successful operation, scenario state returned"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/State"
