openapi: 3.0.3
info:
  title: ITM TA3 API
  description: |-
    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.

    The API is based on the OpenAPI 3.0 specification.
  version: 0.2.2
servers:
  - url: /
tags:
  - name: itm-ta2-eval
    description: Endpoints for TA2 Evaluation
paths:
  /ta2/startSession:
    get:
      tags:
        - itm-ta2-eval
      summary: Start a new session
      description:
        Get unique session id for grouping answers from a collection of
        scenarios/probes together
      operationId: start_session
      parameters:
        - name: adm_name
          in: query
          description: A self-assigned ADM name.  Can add authentication later.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: session_type
          in: query
          description: "the type of session to start (`test`, `eval`, or a TA1 name)"
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: test
        - name: kdma_training
          in: query
          description: whether or not this is a training session with TA2
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
        - name: max_scenarios
          in: query
          description:
            "the maximum number of scenarios requested, supported only in\
            \ `test` sessions"
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int16
      responses:
        "200":
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                description: a new session Id to use in subsequent calls
                x-content-type: text/plain
        "400":
          description: Invalid session type or max_scenarios
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "503":
          description: The server is not ready to start a session
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/scenario:
    get:
      tags:
        - itm-ta2-eval
      summary: Get the next scenario
      description:
        "Get the next scenario in a session with the specified ADM name,\
        \ returning a Scenario object and unique id"
      operationId: start_scenario
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: query
          description: "a scenario id to start, used internally by TA3"
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description:
            "Successful operation; scenario data returned, or session_complete\
            \ is True"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scenario"
        "403":
          description: Specifying a scenario ID is unauthorized
        "404":
          description: Session or Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/getAlignmentTarget:
    get:
      tags:
        - itm-ta2-eval
      summary: Retrieve alignment target for the scenario
      description: Retrieve alignment target for the scenario with the specified id
      operationId: get_alignment_target
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: query
          description: The ID of the scenario for which to retrieve alignment target
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation, alignment target returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlignmentTarget"
        "400":
          description: Scenario Complete
        "404":
          description: Session or Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/{scenario_id}/getState:
    get:
      tags:
        - itm-ta2-eval
      summary: Retrieve scenario state
      description: Retrieve state of the scenario with the specified id
      operationId: get_scenario_state
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: path
          description: the ID of the scenario for which to retrieve status
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation, scenario state returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        "404":
          description: Invalid scenario ID supplied
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/{scenario_id}/getAvailableActions:
    get:
      tags:
        - itm-ta2-eval
      summary: Get a list of currently available ADM actions
      description:
        Retrieve a list of currently available actions in the scenario
        with the specified id
      operationId: get_available_actions
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: path
          description: The ID of the scenario for which to retrieve avaialble actions
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation; array of possible Actions returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
                x-content-type: application/json
        "400":
          description: Scenario Complete
        "404":
          description: Invalid scenario ID supplied
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/takeAction:
    post:
      tags:
        - itm-ta2-eval
      summary: Take an action within a scenario
      description: Take the specified Action within a scenario
      operationId: take_action
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description:
          Encapsulation of an action taken by a DM in the context of the
          scenario
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Action"
      responses:
        "200":
          description: "Successful operation, scenario state returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        "400":
          description: Invalid action or session_id
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
components:
  schemas:
    Scenario:
      required:
        - id
        - name
        - state
        - scenes
      type: object
      properties:
        id:
          type: string
          description: a globally unique id for the scenario
          default: "1234"
        name:
          type: string
          description: human-readable scenario name, not necessarily unique
          example: IED Explosion
        state:
          description: initial scenario state
          $ref: "#/components/schemas/State"
        scenes:
          type: array
          description: A list of specification for all scenes in the scenario
          items:
            $ref: "#/components/schemas/Scene"
      description: a tactical scenario
    AlignmentTarget:
      required:
        - id
        - kdma_values
      type: object
      properties:
        id:
          type: string
          description: globally unique alignment target id
        kdma_values:
          type: array
          description: list of KDMAs to align to
          items:
            $ref: "#/components/schemas/KDMA_Value"
      description: list of KDMAs to align to
      example:
        kdma_values:
          - value: 0.8
            kdma: mission
          - value: 0.8
            kdma: mission
        id: id
    KDMA_Value:
      required:
        - kdma
        - value
      type: object
      properties:
        kdma:
          type: string
          description: KDMA name
          example: mission
        value:
          type: number
          description: target alignment value
          format: float
          example: 0.8
      description: a KDMA and its value
      example:
        value: 0.8
        kdma: mission
    State:
      required:
        - unstructured
        - mission
        - environment
        - threat_state
        - supplies
        - characters
      type: object
      properties:
        unstructured:
          type: string
          description: text description of current state
        mission:
          description: Mission parameters that impact decision-making
          $ref: "#/components/schemas/Mission"
        environment:
          description: Environmental parameters that impact either decision-making, the simulation environment, or both
          $ref: "#/components/schemas/Environment"
        threat_state:
          description: Description of the current threat to the characters, including the medic
          $ref: "#/components/schemas/ThreatState"
        supplies:
          type: array
          description: a list of medical supplies available to the DM
          items:
            $ref: "#/components/schemas/Supplies"
        characters:
          type: array
          description: the list of characters in the scenario
          items:
            $ref: "#/components/schemas/Character"
      description:
        the current tactical & environmental state of the scenario and
        of its casualties.
    Mission:
      required:
        - mission_type
        - unstructured
        - critical_ids
        - civilian_presence
        - communication_capability
        - roe
        - political_climate
        - medical_policies
      type: object
      properties:
        unstructured:
          type: string
          description: natural language description of current mission
          example: Place sensors in and around the jungle base
        mission_type:
          type: string
          description: enumeration of possible mission types
          enum:
            - Listening/Observation
            - Direct Action
            - Hostage rescue
            - Asset transport
            - Sensor emplacement
            - Intelligence gathering
            - Civil affairs
            - Training
            - Sabotage
            - Security patrol
            - Fire support
            - Nuclear deterrence
            - Extraction
            - Unknown
        critical_ids:
          type: object
          additionalProperties:
            type: string
            enum:
              - none
              - normal
              - important
              - priority
              - vip
          example:
            - 123: none
            - 456: priority
          description: A list of pairs of character ids with an indicator of how mission-critical the character is
        civilian_presence:
          type: string
          enum:
            - none
            - limited
            - some
            - extensive
            - crowd
          description: Indicator of how many civilians are present in the mission
        communication_capability:
          type: string
          enum:
            - all
            - satellite
            - radio
            - voice
            - visual
          description: current operational communication capability and limitations
        roe:
          type: string
          description: rules of engagement to inform decision-making, but not to restrict decision space
        political_climate:
          type: string
          description: The political climate in a mission to inform decision-making
        medical_policies:
          type: string
          description: Medical policies in effect in a mission, to inform decision-making
      description: encapsulates the scenario's strategic mission
    Environment:
      required:
        - sim-environment
        - decision-environment
      type: object
      properties:
        sim-environment:
          $ref: "#/components/schemas/SimEnvironment"
          description: Elements that impact simulation configuration
        decision-environment:
          $ref: "#/components/schemas/DecisionEnvironment"
          description: Elements that impact decision-making

    SimEnvironment:
      required:
        - type
        - terrain
        - weather
        - lighting
        - visibility
        - noise_ambient
        - noise_peak
        - temperature
        - humidity
        - flora
        - fauna
      type: object
      properties:
        type:
          type: string
          enum:
            - jungle
            - submarine
            - urban
            - desert
          description: Basic setting for the entire scenario
        weather:
          type: string
          description: a natural language description of local weather conditions
          enum:
            - clear
            - wind
            - clouds
            - rain
            - fog
            - thunderstorm
            - hail
            - sleet
            - snow
        terrain:
          type: string
          description: a natural language description of the local terrain
          enum:
            - jungle
            - indoors
            - urban
            - dunes
            - forest
            - beach
            - mountain
            - plains
            - hills
            - swamp
            - flat
            - rough
            - extreme
        flora:
          type: string
          description: a natural language description of the local vegetation
          enum:
            - none
            - limited
            - normal
            - lush
            - extensive
        fauna:
          type: string
          description: a natural language description of the local animals/insects
          enum:
            - none
            - limited
            - normal
            - high
            - pervasive
        temperature:
          type: float
          description: numerical temperature in degrees Fahrenheit
          example: 82.5
        humidity:
          type: float
          description: percentage of relative humidity
          example: 80
        lighting:
          type: string
          description: Descriptor of available natural or man-made lighting
          enum:
            - none
            - limited
            - normal
            - bright
            - flashing
        visibility:
          type: string
          description: Descriptor for operational visibility; affected by time of day, lighting, weather, terrain, etc.
          enum:
            - none
            - low
            - normal
            - good
            - excellent
            - variable
        noise_ambient:
          type: string
          description: Descriptor for background noise level
          enum:
            - none
            - quiet
            - normal
            - noisy
            - extreme
        noise_peak:
          type: string
          description: Descriptor for peak noise level due to gunfire, vehicles, helicopters, etc.
          enum:
            - none
            - quiet
            - normal
            - noisy
            - extreme
      description: an encapsulation of environmental factors at the scenario location

    DecisionEnvironment:
      required:
        - unstructured
        - aid_delay
        - movement_restriction
        - sound_restriction
        - oxygen_levels
        - population_density
        - injury_triggers
        - air_quality
        - city_infrastructure
      type: object
      properties:
        unstructured:
          type: string
          description: Natural language, plain text description of decision-impacting environmental factors
        aid_delay:
          $ref: "#/components/schemas/AidDelay"
          description: Properties related to CASEVAC or MEDEVAC
        movement_restriction:
          type: string
          enum:
            - unrestricted
            - minimal
            - moderate
            - severe
            - extreme
          description: Operational movement restrictions due to any factor including terrain, weather, enemy activity, etc.
        sound_restriction:
          type: string
          enum:
            - unrestricted
            - minimal
            - moderate
            - severe
            - extreme
          description: Operational sound restrictions due to any factor
        oxygen_levels:
          type: string
          enum:
            - normal
            - limited
            - scarce
            - none
          description: Oxygen levels due to any factor that may impact decision-making
        population_density:
          type: integer
          description: Population per square mile
        injury_triggers:
          type: string
          enum:
            - explosion
            - firearm
            - fall
            - pathogen
            - animal
            - plant
            - water
            - collision
            - equipment
            - attack
            - fire
            - stress
            - chemical
          description: What source(s) caused character injuries.
        air_quality:
          type: integer
          description: Air Quality Index (AQI)
        city_infrastructure:
          type: string
          description: TBD
    AidDelay:
      required:
        - delay
        - type
        - max_transport
      type: object
      properties:
        delay:
          type: float
          description: CASEVAC or MEDEVAC timer, in minutes
        type:
          type: string
          enum:
            - AMEV
            - truck
            - helicopter
            - unknown
          description: Means of evacuation
        max_transport:
          type: integer
          description: Maximum number of casualties that can be transported
    ThreatState:
      required:
        - unstructured
        - threats
      type: object
      properties:
        unstructured:
          type: string
          description: text description of current threat state
          example: No additional threats are detected
        threats:
          type: object
          additionalProperties:
            type: float
          description: A list of pairs of threat types with a numeric severity indicator
          example:
            - gunfire: 7
            - flora: 3
      description: encapsulation of the state of threat for participants in the scenario
    Supplies:
      required:
        - quantity
        - type
        - reusable
      type: object
      properties:
        type:
          type: string
          description: an enumeration of available supply types
          example: Tourniquet
          enum:
            - Tourniquet
            - Pressure bandage
            - Hemostatic gauze
            - Decompression Needle
            - Nasopharyngeal airway
            - Pulse Oximeter
            - Blanket
            - Epi Pen
            - Vented Chest Seal
            - Pain Medications
            - Blood
        quantity:
          type: integer
          description:
            the number (count) of this item available to the medic at the
            present time
          format: int32
          example: 4
        reusable:
          type: boolean
          description: whether or not item is consumable/reusable
      description: a single type of medical supply available to the medic
    Character:
      required:
        - id
        - name
        - unstructured
        - unstructured_postassess
        - rapport
        - demographics
        - vitals
        - injuries
      type: object
      properties:
        id:
          type: string
          description: string, globally unique character identifier
        name:
          type: string
          description: display name, as in a dashboard
        unstructured:
          type: string
          description: natural language text description of the character
        unstructured_postassess:
          type: string
          description: Natural language, plain text description of the character, including injuries, demographics, and rapport
        rapport:
          type: float
          description: A measure of closeness or affinity towards the player/medic
        demographics:
          description: Basic properties about the character
          $ref: "#/components/schemas/Demographics"
        injuries:
          type: array
          description: an array of character injuries
          items:
            $ref: "#/components/schemas/Injury"
        vitals:
          $ref: "#/components/schemas/Vitals"
      description: encapulation of a single casualty in the scenario
    Demographics:
      required:
        - age
        - sex
        - race
        - military_disposition
        - military_branch
        - rank
        - rank_title
        - skills
        - role
        - mission_importance
      type: object
      properties:
        age:
          type: integer
          description: the age of the casualty, omit if unknown
          format: int16
          example: 32
        sex:
          type: string
          description: the sex of the casualty, omit if unknown/indeterminate
          example: F
          enum:
            - M
            - F
        race:
          type: string
          description: Race or ethnicity
        military_disposition:
          type: string
          enum:
            - Allied US
            - Allied
            - Civilian
            - Military Adversary
            - Non-Military Adversary
          description: How the character is to be treated in a military context
        military_branch:
          type: string
          enum:
            - US Army
            - US Navy
            - US Air Force
            - US Marine Corps
            - US Space Force
            - US Coast Guard
          description: Branch of the US military.
        rank:
          type: string
          description: the military status of the casualty, omit if unknown
          enum:
            - Marine
            - FMF Corpsman
            - Sailor
            - Civilian
            - SEAL
            - Intel Officer
        rank_title:
          type: string
          description: Branch-specific military rank
        skills:
          type: object
          additionalProperties:
            type: float
          description: A list of pairs of skill_type and numeric skill_level
          example:
            - Medical: 3.6
            - Combat: 4
        role:
          type: string
          description: The primary role a character has in the mission, in terms of the skills they possess
          enum:
            - Infantry
            - SEAL
            - Command
            - Intelligence
            - Medical
            - Specialist
            - Communications
        mission_importance:
          type: string
          description: How important the character is to the mission
          enum:
            - none
            - normal
            - important
            - priority
            - vip
      description: demographic profile of a casualty
    Injury:
      required:
        - location
        - name
        - severity
        - hidden
      type: object
      properties:
        name:
          type: string
          description: a brief label for the type of injury
          example: Laceration
          enum:
            - Forehead Scrape
            - Ear Bleed
            - Asthmatic
            - Laceration
            - Puncture
            - Shrapnel
            - Chest Collapse
            - Amputation
            - Burn
            - Abrasion
            - Internal
        location:
          type: string
          description: the injury location on the casualty's body
          example: right forearm
          enum:
            - right forearm
            - left forearm
            - right calf
            - left calf
            - right thigh
            - left thigh
            - right stomach
            - left stomach
            - right bicep
            - left bicep
            - right shoulder
            - left shoulder
            - right side
            - left side
            - right chest
            - left chest
            - right wrist
            - left wrist
            - left face
            - right face
            - left neck
            - right neck
            - internal
            - unspecified
        severity:
          type: float
          description: the apparent severity of the injury from 0 (low) to 1.0 (high)
          example: 0.8
        hidden:
          type: boolean
          description: Whether the injury is known prior to assessment
      description: An injury on a character. The name field defines a controlled vocabulary.
    Vitals:
      required:
        - conscious
        - avpu
        - mental_status
        - breathing
        - hrpmin
        - Spo2
      type: object
      properties:
        conscious:
          type: boolean
          description: whether or not the character is conscious
          example: true
        avpu:
          type: string
          description: Character level of response
          enum:
            - ALERT
            - VOICE
            - PAIN
            - UNRESPONSIVE
        mental_status:
          type: string
          description: description of the character's overall demeanor
          example: CALM
          enum:
            - AGONY
            - CALM
            - CONFUSED
            - UPSET
            - UNRESPONSIVE
        breathing:
          type: string
          description: a descriptor for the character's breathing
          example: NORMAL
          enum:
            - NORMAL
            - FAST
            - RESTRICTED
            - NONE
        hrpmin:
          type: float
          description: heart rate in beats per minute
        Spo2:
          type: float
          description: blood oxygen level
      description: "vital levels for a character, omit properties if unknown"

    Scene:
      required:
        - index
        - state
        - end_scenario_allowed
        - tagging
        - actions
      type: object
      properties:
        index:
          type: integer
          description: The order the scene appears in the scenario
        state:
          $ref: "#/components/schemas/State"
          description: The beginning state for the current scene
        end_scenario_allowed:
          type: boolean
          description: Whether ADMs can end the scenario during this scene
        tagging:
          description: Scene-level tagging configuration
          $ref: "#/components/schemas/Tagging"
        actions:
          description: List of available actions
          type: array
          items:
            $ref: "#/components/schemas/Action"
        transition_semantics:
          description: Whether multiple transitions use and, or, or not semantics
          type: string
          enum:
            - and
            - or
            - not
        transitions:
          description: Conditions that specify how and when to transition to the next scene
          type: array
          items:
            $ref: "#/components/schemas/Condition"
    TriageCategory:
      type: object
      properties:
        tagLabel:
          type: string
          example: MINIMAL
          enum:
            - MINIMAL
            - DELAYED
            - IMMEDIATE
            - EXPECTANT
        description:
          type: string
          description: a one-line description of the tagLabel category
        criteria:
          type: string
          description: detailed criteria for the tagLabel category
      description: The type of supported triage categories for this scenario
      example:
        criteria: criteria
        description: description
        tagLabel: MINIMAL
    Action:
      required:
        - id
        - type
        - unstructured
        - character_id
        - probe_id
        - choice
        - kdma_association
      type: object
      properties:
        id:
          type: string
          description: action ID
        type:
          type: string
          description: The action type taken from a controlled vocabulary
          example: APPLY_TREATMENT
          enum:
            - APPLY_TREATMENT
            - CHECK_ALL_VITALS
            - CHECK_PULSE
            - CHECK_RESPIRATION
            - DIRECT_MOBILE_CASUALTIES
            - END_SCENARIO
            - MOVE_TO_EVAC
            - SITREP
            - TAG_CASUALTY
        unstructured:
          type: string
          description: a plain text unstructured description of the action
          example: "Check pulse of casualty [1234]."
        repeatable:
          type: boolean
          description: Whether or not this action should remain after it’s selected by an ADM.
        character_id:
          type: string
          description: The ID of the casualty being acted upon
        parameters:
          type: object
          additionalProperties:
            type: string
          description: key-value pairs containing additional action-specific parameters
          example:
            - treatment: Tourniquet
            - location: right forearm
        probe_id:
          type: string
          description: A valid probe_id from the appropriate TA1
        choice:
          type: string
          description: A valid choice for the specified probe_id
        kdma_association:
          type: object
          additionalProperties:
            type: float
          description: KDML associations with this action used in training
          example:
            - Mission: 0.8
        condition_semantics:
          description: Whether multiple conditions use and, or, or not semantics
          type: string
          enum:
            - and
            - or
            - not
        conditions:
          description: Conditions that specify how and when to transition to the next scene
          type: array
          items:
            $ref: "#/components/schemas/Condition"
      description: An encapulation of a single action taken by a DM
    Condition:
      required:
        - elapsed_time_lt
        - elapsed_time_gt
        - actions
        - probes
        - probe_responses
        - character_vitals
        - supplies
      type: object
      properties:
        elapsed_time_lt:
          type: integer
          description: True if the scenario elapsed time (in seconds) is less than the specified value
        elapsed_time_gt:
          type: integer
          description: True if the scenario elapsed time (in seconds) is greater than the specified value
        actions:
          type: string
        probes:
          type: string
        probe_responses:
          type: string
        character_vitals:
          type: string
        supplies:
          type: string
    Tagging:
      required:
        - enabled
        - repeatable
        - probe_responses
        - reference
      type: object
      properties:
        enabled:
          type: boolean
        repeatable:
          type: boolean
        probe_responses:
          type: string
        reference:
          type: string
    Probe:
      required:
        - character_id
        - probe_id
        - minimal
        - delayed
        - immediate
        - expectant
      type: object
      properties:
        character_id:
          type: string
          description: A valid character ID from the scene
        probe_id:
          type: string
          description: A valid probe_id from the appropriate TA1
        minimal:
          type: string
          description: The probe response to send for a MINIMAL tag
        delayed:
          type: string
          description: The probe response to send for a DELAYED tag
        immediate:
          type: string
          description: The probe response to send for a IMMEDIATE tag
        expectant:
          type: string
          description: The probe response to send for a EXPECTANT tag

  responses:
    server_error:
      description: An exception occurred on the server; see returned error string.
      content:
        text/plain:
          schema:
            type: string
            x-content-type: text/plain
    state_returned:
      description: "Successful operation, scenario state returned"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/State"
