openapi: 3.0.3
info:
  title: ITM TA3 API
  description: |-
    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.

    The API is based on the OpenAPI 3.0 specification.
  version: 0.2.2
servers:
  - url: /
tags:
  - name: itm-ta2-eval
    description: Endpoints for TA2 Evaluation
paths:
  /ta2/startSession:
    get:
      tags:
        - itm-ta2-eval
      summary: Start a new session
      description:
        Get unique session id for grouping answers from a collection of
        scenarios together
      operationId: start_session
      parameters:
        - name: adm_name
          in: query
          description: A self-assigned ADM name.  Can add authentication later.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: session_type
          in: query
          description: "the type of session to start (`eval` or a TA1 name)"
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: eval
        - name: kdma_training
          in: query
          description: whether or not this is a training session with TA2
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
        - name: max_scenarios
          in: query
          description:
            "the maximum number of scenarios requested, not supported in\
            \ `eval` sessions"
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int16
      responses:
        "200":
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                description: a new session Id to use in subsequent calls
                x-content-type: text/plain
        "400":
          description: Invalid session type or max_scenarios
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "503":
          description: The server is not ready to start a session
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/scenario:
    get:
      tags:
        - itm-ta2-eval
      summary: Get the next scenario
      description:
        "Get the next scenario in a session with the specified ADM name,\
        \ returning a Scenario object and unique id"
      operationId: start_scenario
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: query
          description: "a scenario id to start, used internally by TA3"
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description:
            "Successful operation; scenario data returned, or session_complete\
            \ is True"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scenario"
        "400":
          description: Invalid Session ID or there is already an active scenario
        "403":
          description: Specifying a scenario ID is unauthorized
        "404":
          description: Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/getAlignmentTarget:
    get:
      tags:
        - itm-ta2-eval
      summary: Retrieve alignment target for the scenario
      description: Retrieve alignment target for the scenario with the specified id
      operationId: get_alignment_target
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: query
          description: The ID of the scenario for which to retrieve alignment target
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation, alignment target returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlignmentTarget"
        "400":
          description: Scenario Complete or Invalid Session ID
        "404":
          description: Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/getSessionAlignment:
    get:
      tags:
        - itm-ta2-eval
      summary: Retrieve session alignment from TA1
      description: Retrieve the current session alignment for the session with the specified id
      operationId: get_session_alignment
      parameters:
        - name: session_id
          in: query
          description: "a unique session_id, as returned by /ta2/startSession"
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: target_id
          in: query
          description: alignment target id
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlignmentResults"
        "400":
          description: Session ID not found
        "403":
          description: Session alignment can only be requested during a training session
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/{scenario_id}/getState:
    get:
      tags:
        - itm-ta2-eval
      summary: Retrieve scenario state
      description: Retrieve state of the scenario with the specified id
      operationId: get_scenario_state
      parameters:
        - name: session_id
          in: query
          description: a unique session_id, as returned by /ta2/startSession
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: path
          description: the ID of the scenario for which to retrieve status
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation, scenario state returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        "400":
          description: Invalid Session ID
        "404":
          description: Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/{scenario_id}/getAvailableActions:
    get:
      tags:
        - itm-ta2-eval
      summary: Get a list of currently available ADM actions
      description:
        Retrieve a list of currently available actions in the scenario
        with the specified id
      operationId: get_available_actions
      parameters:
        - name: session_id
          in: query
          description: a unique session_id, as returned by /ta2/startSession
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: scenario_id
          in: path
          description: The ID of the scenario for which to retrieve available actions
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation; array of possible Actions returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
                x-content-type: application/json
        "400":
          description: Scenario Complete or Invalid Session ID
        "404":
          description: Scenario ID not found
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
  /ta2/takeAction:
    post:
      tags:
        - itm-ta2-eval
      summary: Take an action within a scenario
      description: Take the specified Action within a scenario
      operationId: take_action
      parameters:
        - name: session_id
          in: query
          description: a unique session_id, as returned by /ta2/startSession
          required: true
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description:
          Encapsulation of an action taken by a DM in the context of the
          scenario
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Action"
      responses:
        "200":
          description: "Successful operation, scenario state returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        "400":
          description: Invalid action or Session ID
        "500":
          description: An exception occurred on the server; see returned error string.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.itm_ta2_eval_controller
components:
  schemas:
    Scenario:
      required:
        - id
        - name
        - state
        - scenes
      type: object
      properties:
        id:
          type: string
          description: a globally unique id for the scenario
          default: "1234"
        name:
          type: string
          description: human-readable scenario name, not necessarily unique
          example: IED Explosion
        state:
          description: initial scenario state
          $ref: "#/components/schemas/State"
        scenes:
          type: array
          description: A list of specification for all scenes in the scenario
          items:
            $ref: "#/components/schemas/Scene"
      description: a tactical scenario
    AlignmentTarget:
      required:
        - id
        - kdma_values
      type: object
      properties:
        id:
          type: string
          description: globally unique alignment target id
        kdma_values:
          type: array
          description: list of KDMAs to align to
          items:
            $ref: "#/components/schemas/KDMA_Value"
      description: list of KDMAs to align to
      example:
        kdma_values:
          - value: 0.8
            kdma: mission
          - value: 0.8
            kdma: mission
        id: id
    KDMA_Value:
      required:
        - kdma
        - value
      type: object
      properties:
        kdma:
          type: string
          description: KDMA name
          example: mission
        value:
          type: number
          description: target alignment value
          format: float
          example: 0.8
      description: a KDMA and its value
      example:
        value: 0.8
        kdma: mission
    State:
      required:
        - unstructured
        - environment
        - supplies
        - characters
      type: object
      properties:
        unstructured:
          type: string
          description: text description of current state
        mission:
          description: Mission parameters that impact decision-making
          $ref: "#/components/schemas/Mission"
        environment:
          description: Environmental parameters that impact either decision-making, the simulation environment, or both
          $ref: "#/components/schemas/Environment"
        threat_state:
          description: Description of the current threat to the characters, including the medic
          $ref: "#/components/schemas/ThreatState"
        supplies:
          type: array
          description: a list of medical supplies available to the DM
          items:
            $ref: "#/components/schemas/Supplies"
        characters:
          type: array
          description: the list of characters in the scenario
          items:
            $ref: "#/components/schemas/Character"
      description:
        the current tactical & environmental state of the scenario and
        of its characters.
    Mission:
      required:
        - mission_type
        - unstructured
      type: object
      properties:
        unstructured:
          type: string
          description: natural language description of current mission
          example: Place sensors in and around the jungle base
        mission_type:
          $ref: "#/components/enums/MissionType"
        critical_ids:
          type: object
          additionalProperties:
            $ref: "#/components/enums/CriticalLevel"
          example:
            - 123: none
            - 456: priority
          description: A list of pairs of character ids with an indicator of how mission-critical the character is
        civilian_presence:
          $ref: "#/components/enums/CivilianPresence"
        communication_capability:
          $ref: "#/components/enums/CommunicationCapability"
        roe:
          type: string
          description: rules of engagement to inform decision-making, but not to restrict decision space
        political_climate:
          type: string
          description: The political climate in a mission to inform decision-making
        medical_policies:
          type: string
          description: Medical policies in effect in a mission, to inform decision-making
      description: encapsulates the scenario's strategic mission
    Environment:
      required:
        - sim_environment
        - decision_environment
      type: object
      properties:
        sim_environment:
          $ref: "#/components/schemas/SimEnvironment"
          description: Elements that impact simulation configuration
        decision_environment:
          $ref: "#/components/schemas/DecisionEnvironment"
          description: Elements that impact decision-making

    SimEnvironment:
      required:
        - type
      type: object
      properties:
        type:
          $ref: "#/components/enums/SimEnvironmentType"
        weather:
          $ref: "#/components/enums/WeatherType"
        terrain:
          $ref: "#/components/enums/TerrainType"
        flora:
          $ref: "#/components/enums/FloraType"
        fauna:
          $ref: "#/components/enums/FaunaType"
        temperature:
          type: number
          format: float
          description: numerical temperature in degrees Fahrenheit
          example: 82.5
        humidity:
          type: number
          format: float
          description: percentage of relative humidity
          example: 80
        lighting:
          $ref: "#/components/enums/LightingType"
        visibility:
          $ref: "#/components/enums/VisibilityType"
        noise_ambient:
          $ref: "#/components/enums/AmbientNoise"
        noise_peak:
          $ref: "#/components/enums/PeakNoise"
      description: an encapsulation of environmental factors at the scenario location

    DecisionEnvironment:
      required:
        - unstructured
      type: object
      properties:
        unstructured:
          type: string
          description: Natural language, plain text description of decision-impacting environmental factors
        aid_delay:
          $ref: "#/components/schemas/AidDelay"
          description: Properties related to CASEVAC or MEDEVAC
        movement_restriction:
          $ref: "#/components/enums/MovementRestriction"
        sound_restriction:
          $ref: "#/components/enums/SoundRestriction"
        oxygen_levels:
          $ref: "#/components/enums/OxygenLevels"
        population_density:
          type: integer
          description: Population per square mile
        injury_triggers:
          $ref: "#/components/enums/InjuryTrigger"
        air_quality:
          type: integer
          description: Air Quality Index (AQI)
        city_infrastructure:
          type: string
          description: TBD
    AidDelay:
      required:
        - delay
      type: object
      properties:
        delay:
          type: number
          format: float
          description: CASEVAC or MEDEVAC timer, in minutes
        type:
          $ref: "#/components/enums/AidType"
        max_transport:
          type: integer
          description: Maximum number of casualties that can be transported
    ThreatState:
      required:
        - unstructured
      type: object
      properties:
        unstructured:
          type: string
          description: text description of current threat state
          example: No additional threats are detected
        threats:
          type: array
          description: An array of threats
          items:
            $ref: "#/components/schemas/Threat"
      description: encapsulation of the state of threat for participants in the scenario
      example:
        unstructured: No additional threats are detected
        threats:
          - type: Gunfire
            severity: 0.5
          - type: Gunfire
            severity: 0.5
    Threat:
      type: object
      additionalProperties:
        type: string
      description: |-
        list of pairs of type (enum like IED, Gunshots, fire, etc)
        and severity (float 0 (no threat) - 1 (max severity))
      example:
        type: Gunfire
        severity: 0.5
    Supplies:
      required:
        - quantity
        - type
        - reusable
      type: object
      properties:
        type:
          $ref: "#/components/enums/SupplyType"
        reusable:
          type: boolean
          description: Whether or not item is consumable/reusable
        quantity:
          type: integer
          description:
            the number (count) of this item available to the medic at the
            present time
          format: int32
          example: 4
      description: a single type of medical supply available to the medic
      example:
        quantity: 4
        type: Tourniquet

    Character:
      required:
        - id
        - name
        - unstructured
        - demographics
        - vitals
      type: object
      properties:
        id:
          type: string
          description: string, globally unique character identifier
        name:
          type: string
          description: display name, as in a dashboard
        unstructured:
          type: string
          description: natural language text description of the character
        unstructured_postassess:
          type: string
          description: Natural language, plain text description of the character, including injuries, demographics, and rapport
        rapport:
          type: number
          format: float
          description: A measure of closeness or affinity towards the player/medic
        demographics:
          description: Basic properties about the character
          $ref: "#/components/schemas/Demographics"
        injuries:
          type: array
          description: an array of character injuries
          items:
            $ref: "#/components/schemas/Injury"
        vitals:
          $ref: "#/components/schemas/Vitals"
      description: encapulation of a single character in the scenario
    Demographics:
      required:
        - age
        - sex
        - race
      type: object
      properties:
        age:
          type: integer
          description: the age of the character, omit if unknown
          format: int16
          example: 32
        sex:
          $ref: "#/components/enums/DemographicSex"
        race:
          type: string
          description: Race or ethnicity
        military_disposition:
          $ref: "#/components/enums/MilitaryDisposition"
        military_branch:
          $ref: "#/components/enums/MilitaryBranch"
        rank:
          $ref: "#/components/enums/MilitaryRank"
        rank_title:
          type: string
          description: Branch-specific military rank
        skills:
          type: array
          items:
            $ref: "#/components/schemas/SkillType"
        role:
          $ref: "#/components/enums/CharacterRole"
        mission_importance:
          $ref: "#/components/enums/CharacterImportance"
      description: demographic profile of a character
    SkillType:
      required:
        - skill_type
        - level
      type: object
      properties:
        skill_type:
          $ref: "#/components/enums/SkillType"
        level:
          type: number
          format: float
          description: the level of expertise the character has in their skill
    Injury:
      required:
        - location
        - name
        - hidden
      type: object
      properties:
        name:
          $ref: "#/components/enums/InjuryType"
        location:
          $ref: "#/components/enums/InjuryLocation"
        severity:
          type: number
          format: float
          description: the apparent severity of the injury from 0 (low) to 1.0 (high)
          example: 0.8
        hidden:
          type: boolean
          description: Whether the injury is known prior to assessment
      description: An injury on a character. The name field defines a controlled vocabulary.
    Vitals:
      required:
        - conscious
        - avpu
        - mental_status
        - breathing
        - hrpmin
        - Spo2
      type: object
      properties:
        conscious:
          type: boolean
          description: whether or not the character is conscious
          example: true
        avpu:
          $ref: "#/components/enums/AvpuLevel"
        mental_status:
          $ref: "#/components/enums/MentalStatus"
        breathing:
          $ref: "#/components/enums/BreathingLevel"
        hrpmin:
          type: integer
          format: int16
          description: heart rate in beats per minute
        Spo2:
          type: number
          format: float
          description: blood oxygen level
      description: "vital levels for a character, omit properties if unknown"

    Scene:
      required:
        - index
        - state
        - end_scenario_allowed
        - actions
      type: object
      properties:
        index:
          type: integer
          description: The order the scene appears in the scenario
        state:
          $ref: "#/components/schemas/State"
          description: The beginning state for the current scene
        end_scenario_allowed:
          type: boolean
          description: Whether ADMs can end the scenario during this scene
        tagging:
          description: Scene-level tagging configuration
          $ref: "#/components/schemas/Tagging"
        actions:
          description: List of available actions
          type: array
          items:
            $ref: "#/components/schemas/Action"
        transition_semantics:
          $ref: "#/components/enums/SemanticType"
        transitions:
          description: Conditions that specify how and when to transition to the next scene
          $ref: "#/components/schemas/Conditions"
    Action:
      required:
        - id
        - type
        - unstructured
        - character_id
      type: object
      properties:
        id:
          type: string
          description: action ID
        type:
          $ref: "#/components/enums/ActionType"
        unstructured:
          type: string
          description: a plain text unstructured description of the action
          example: "Check pulse of character [1234]."
        repeatable:
          type: boolean
          description: Whether or not this action should remain after it’s selected by an ADM.
        character_id:
          type: string
          description: The ID of the character being acted upon
        parameters:
          type: object
          additionalProperties:
            type: string
          description: key-value pairs containing additional action-specific parameters
          example:
            - treatment: Tourniquet
            - location: right forearm
        probe_id:
          type: string
          description: A valid probe_id from the appropriate TA1
        choice:
          type: string
          description: A valid choice for the specified probe_id
        kdma_association:
          type: object
          additionalProperties:
            type: number
          description: KDMA associations with this action used in training
          example:
            - Mission: 0.8
        condition_semantics:
          $ref: "#/components/enums/SemanticType"
        conditions:
          $ref: "#/components/schemas/Conditions"
      description: An encapulation of a single action taken by a DM
    Conditions:
      type: object
      properties:
        elapsed_time_lt:
          type: integer
          description: True if the scenario elapsed time (in seconds) is less than the specified value
        elapsed_time_gt:
          type: integer
          description: True if the scenario elapsed time (in seconds) is greater than the specified value
        actions:
          description: multiple action ID lists have "or" semantics; multiple action IDs within a list have "and" semantics
          type: array
          items:
            type: array
            items:
              type: string
        probes:
          type: array
          items:
            type: string
        probe_responses:
          type: array
          items:
            type: string
        character_vitals:
          type: array
          items:
            type: object
            properties:
              character_id:
                type: string
                description: The ID of the character in question
              vitals:
                $ref: "#/components/schemas/Vitals"
                description: The minimum vitals of the specified character
        supplies:
          type: array
          description: a list of medical supplies available to the DM
          items:
            $ref: "#/components/schemas/Supplies"
    Tagging:
      type: object
      properties:
        enabled:
          type: boolean
        repeatable:
          type: boolean
        probe_responses:
          type: array
          items:
            $ref: "#/components/schemas/Probe"
        reference:
          type: integer
    Probe:
      required:
        - character_id
        - probe_id
        - minimal
        - delayed
        - immediate
        - expectant
      type: object
      properties:
        character_id:
          type: string
          description: A valid character ID from the scene
        probe_id:
          type: string
          description: A valid probe_id from the appropriate TA1
        minimal:
          type: string
          description: The probe response to send for a MINIMAL tag
        delayed:
          type: string
          description: The probe response to send for a DELAYED tag
        immediate:
          type: string
          description: The probe response to send for a IMMEDIATE tag
        expectant:
          type: string
          description: The probe response to send for a EXPECTANT tag

  enums:
    MissionType:
      type: string
      description: enumeration of possible mission types
      enum:
        - Listening/Observation
        - Direct Action
        - Hostage rescue
        - Asset transport
        - Sensor emplacement
        - Intelligence gathering
        - Civil affairs
        - Training
        - Sabotage
        - Security patrol
        - Fire support
        - Nuclear deterrence
        - Extraction
        - Unknown
    CriticalLevel:
      type: string
      enum:
        - none
        - normal
        - important
        - priority
        - vip
    SimEnvironmentType:
      type: string
      description: Basic setting for the entire scenario
      enum:
        - jungle
        - submarine
        - urban
        - desert
    CivilianPresence:
      type: string
      description: Indicator of how many civilians are present in the mission
      enum:
        - none
        - limited
        - some
        - extensive
        - crowd
    CommunicationCapability:
      type: string
      description: current operational communication capability and limitations
      enum:
        - all
        - satellite
        - radio
        - voice
        - visual
    WeatherType:
      type: string
      description: a natural language description of local weather conditions
      enum:
        - clear
        - wind
        - clouds
        - rain
        - fog
        - thunderstorm
        - hail
        - sleet
        - snow
    TerrainType:
      type: string
      description: a natural language description of the local terrain
      enum:
        - jungle
        - indoors
        - urban
        - dunes
        - forest
        - beach
        - mountain
        - plains
        - hills
        - swamp
        - flat
        - rough
        - extreme
    FloraType:
      type: string
      description: a natural language description of the local vegetation
      enum:
        - none
        - limited
        - normal
        - lush
        - extensive
    FaunaType:
      type: string
      description: a natural language description of the local animals/insects
      enum:
        - none
        - limited
        - normal
        - high
        - pervasive
    LightingType:
      type: string
      description: Descriptor of available natural or man-made lighting
      enum:
        - none
        - limited
        - normal
        - bright
        - flashing
    VisibilityType:
      type: string
      description: Descriptor for operational visibility; affected by time of day, lighting, weather, terrain, etc.
      enum:
        - none
        - low
        - normal
        - good
        - excellent
        - variable
    AmbientNoise:
      type: string
      description: Descriptor for background noise level
      enum:
        - none
        - quiet
        - normal
        - noisy
        - extreme
    PeakNoise:
      type: string
      description: Descriptor for peak noise level due to gunfire, vehicles, helicopters, etc.
      enum:
        - none
        - quiet
        - normal
        - noisy
        - extreme
    MovementRestriction:
      type: string
      description: Operational movement restrictions due to any factor including terrain, weather, enemy activity, etc.
      enum:
        - unrestricted
        - minimal
        - moderate
        - severe
        - extreme
    SoundRestriction:
      type: string
      description: Operational sound restrictions due to any factor
      enum:
        - unrestricted
        - minimal
        - moderate
        - severe
        - extreme
    OxygenLevels:
      type: string
      description: Oxygen levels due to any factor that may impact decision-making
      enum:
        - normal
        - limited
        - scarce
        - none
    InjuryTrigger:
      type: string
      description: What source(s) caused character injuries.
      enum:
        - explosion
        - firearm
        - fall
        - pathogen
        - animal
        - plant
        - water
        - collision
        - equipment
        - attack
        - fire
        - stress
        - chemical
    AidType:
      type: string
      description: Means of evacuation
      enum:
        - AMEV
        - truck
        - helicopter
        - unknown
    SupplyType:
      type: string
      description: an enumeration of available supply types
      example: Tourniquet
      enum:
        - Tourniquet
        - Pressure bandage
        - Hemostatic gauze
        - Decompression Needle
        - Nasopharyngeal airway
    DemographicSex:
      type: string
      description: the sex of the character, omit if unknown/indeterminate
      example: F
      enum:
        - M
        - F
    MilitaryDisposition:
      type: string
      description: How the character is to be treated in a military context
      enum:
        - Allied US
        - Allied
        - Civilian
        - Military Adversary
        - Non-Military Adversary
    MilitaryBranch:
      type: string
      description: Branch of the US military.
      enum:
        - US Army
        - US Navy
        - US Air Force
        - US Marine Corps
        - US Space Force
        - US Coast Guard
    MilitaryRank:
      type: string
      description: the military status of the character, omit if unknown
      enum:
        - Marine
        - FMF Corpsman
        - Sailor
        - Civilian
        - SEAL
        - Intel Officer
    CharacterRole:
      type: string
      description: The primary role a character has in the mission, in terms of the skills they possess
      enum:
        - Infantry
        - SEAL
        - Command
        - Intelligence
        - Medical
        - Specialist
        - Communications
    CharacterImportance:
      type: string
      description: How important the character is to the mission
      enum:
        - none
        - normal
        - important
        - priority
        - vip
    SkillType:
      type: string
      description: the type of skill the character has
      enum:
        - Medicine
        - Combat
    InjuryType:
      type: string
      description: a brief label for the type of injury
      example: Laceration
      enum:
        - Forehead Scrape
        - Ear Bleed
        - Asthmatic
        - Laceration
        - Puncture
        - Shrapnel
        - Chest Collapse
        - Amputation
        - Burn
        - Abrasion
        - Internal
    InjuryLocation:
      type: string
      description: the injury location on the character's body
      example: right forearm
      enum:
        - right forearm
        - left forearm
        - right calf
        - left calf
        - right thigh
        - left thigh
        - right stomach
        - left stomach
        - right bicep
        - left bicep
        - right shoulder
        - left shoulder
        - right side
        - left side
        - right chest
        - left chest
        - right wrist
        - left wrist
        - left face
        - right face
        - left neck
        - right neck
        - internal
        - unspecified
    AvpuLevel:
      type: string
      description: Character level of response
      enum:
        - ALERT
        - VOICE
        - PAIN
        - UNRESPONSIVE
    MentalStatus:
      type: string
      description: description of the character's overall demeanor
      example: CALM
      enum:
        - AGONY
        - CALM
        - CONFUSED
        - UPSET
        - UNRESPONSIVE
    BreathingLevel:
      type: string
      description: a descriptor for the character's breathing
      example: NORMAL
      enum:
        - NORMAL
        - FAST
        - RESTRICTED
        - NONE
    SemanticType:
      description: Whether multiple transition conditions use and, or, or not semantics
      type: string
      enum:
        - and
        - or
        - not
    ActionType:
      type: string
      description: The action type taken from a controlled vocabulary
      example: APPLY_TREATMENT
      enum:
        - APPLY_TREATMENT
        - CHECK_ALL_VITALS
        - CHECK_PULSE
        - CHECK_RESPIRATION
        - DIRECT_MOBILE_CASUALTIES
        - END_SCENARIO
        - MOVE_TO_EVAC
        - SITREP
        - TAG_CHARACTER
  responses:
    server_error:
      description: An exception occurred on the server; see returned error string.
      content:
        text/plain:
          schema:
            type: string
            x-content-type: text/plain
    state_returned:
      description: "Successful operation, scenario state returned"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/State"
